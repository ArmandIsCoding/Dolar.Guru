@page "/proyecciones"
@{
    var Title = "Tabla de cotizaciones";
}
@attribute [StreamRendering]
@rendermode InteractiveServer

@using System.Net.Http.Json
@using System.Globalization
@using ARM.Dolar.Guru.Models
@using ARM.Dolar.Guru.Services
@inject CotizacionesService CotizacionesService

<PageTitle>@Title</PageTitle>

<div class="w-100 py-3 mb-4 bg-light border-bottom shadow-sm rounded px-3">
    <div class="d-flex justify-content-between align-items-center flex-wrap">
        <h5 class="mb-2 mb-md-0 text-primary fw-bold">📈 Cotizaciones actualizadas al instante</h5>

        <button class="btn btn-outline-primary fw-semibold shadow-sm px-4 py-2 rounded-pill d-flex align-items-center gap-2"
                @onclick="RecargarCotizaciones"
                disabled="@cargando">

            @if (cargando)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span>Cargando...</span>
            }
            else
            {
                <span>🔄 Recargar cotizaciones</span>
            }
        </button>
    </div>
</div>

@if (cotizacionesDolar == null || !cotizacionesDolar.Any() || cotizacionesOtros == null || !cotizacionesOtros.Any())
{
    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-primary text-white fw-bold fs-5">
            💵 Cargando cotizaciones del dólar...
        </div>
        <div class="card-body">
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">

                <div class="col-md-12">
                    <p>
                        Por favor, espere mientras se cargan las cotizaciones del dólar.
                        <img src="dolar-guru.png" style="max-height: 332px;" />
                    </p>

                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                </div>

            </div>
        </div>
    </div>
}
else
{
    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-primary text-white fw-bold fs-5">
            💵 Cotizaciones del Dólar
        </div>
        <div class="card-body">
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th><strong>Nombre</strong></th>
                            <th>Compra</th>
                            <th>Venta</th>
                            <th>Fecha Actualización</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var cotizacion in cotizacionesDolar)
                        {
                            <tr>
                                <td><strong>@cotizacion.Nombre</strong></td>
                                <td>@cotizacion.Compra.ToString("C", CultureInfo.CurrentCulture)</td>
                                <td>@cotizacion.Venta.ToString("C", CultureInfo.CurrentCulture)</td>
                                <td>@cotizacion.FechaActualizacion.ToLocalTime().ToString("g")</td>
                            </tr>
                        }
                    </tbody>
                </table>

            </div>
        </div>
    </div>

    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-secondary text-white fw-bold fs-5">
            💵 Otras Cotizaciones
            -
            <small><span>Todos los valores son expresados en relación al <strong>Peso Argentino</strong></span></small>
        </div>
        <div class="card-body">
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th><strong>Nombre</strong></th>
                            <th>Moneda</th>
                            <th>Compra</th>
                            <th>Venta</th>
                            <th>Fecha Actualización</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var cotizacion in cotizacionesOtros)
                        {
                            <tr>
                                <td><strong>@cotizacion.Nombre</strong></td>
                                <td>@cotizacion.Moneda</td>
                                <td>@cotizacion.Compra.ToString("C", CultureInfo.CurrentCulture)</td>
                                <td>@cotizacion.Venta.ToString("C", CultureInfo.CurrentCulture)</td>
                                <td>@cotizacion.FechaActualizacion.ToLocalTime().ToString("g")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>




    <Proyeccion />
}

<Disclaimer />

@code {
    private bool cargando = false;
    List<Cotizacion>? cotizacionesDolar;
    List<CotizacionOtros>? cotizacionesOtros;

    private LineChartConfig config;
    private Chart chart;

    private int segundosRestantes = 30;
    private System.Timers.Timer? timer;

    List<ProyeccionDolar> proyeccionesDolar = new();

    private async Task RecargarCotizaciones()
    {
        cargando = true;
        IniciarContador();
        CleanChart();
        System.Threading.Thread.Sleep(1000);
        (cotizacionesDolar, cotizacionesOtros) = await CotizacionesService.ObtenerUltimasCotizacionesAsync();
        proyeccionesDolar = await CotizacionesService.ObtenerUltimaProyeccionAsync();
        await InnitChart();
        cargando = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await RecargarCotizaciones();
    }

    private void IniciarContador()
    {
        segundosRestantes = 30;

        timer?.Dispose(); // Limpia el anterior si existe

        timer = new System.Timers.Timer(1000); // 1 segundo
        timer.Elapsed += async (_, _) =>
        {
            if (segundosRestantes > 0)
            {
                segundosRestantes--;
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                timer?.Stop();
                await InvokeAsync(async () =>
                {
                    await RecargarCotizaciones();
                    IniciarContador(); // Reinicia el ciclo
                });
            }
        };

        timer.AutoReset = true;
        timer.Start();
    }

    private void CleanChart()
    {
        config = new LineChartConfig
        {
            Options = new Options
            {
                Responsive = true,
                Plugins = new Plugins
                {
                    Legend = new Legend
                    {
                        Display = false,
                        Position = LegendPosition.Bottom
                    }
                }
            },
            Data = new LineData
            {
                Labels = new List<string>(),
                Datasets = new List<LineDataset>()
            }
        };
    }

    private async Task InnitChart()
    {
        var historicoAgrupado = await CotizacionesService.ObtenerHistoricoAgrupadoAsync();

        config = new LineChartConfig
        {
            Options = new Options
            {
                Responsive = true,
                Plugins = new Plugins
                {
                    Legend = new Legend
                    {
                        Display = true,
                        Position = LegendPosition.Bottom
                    }
                }
            },
            Data = new LineData()
        };

        // Usamos las fechas del primer grupo como Labels
        var fechas = historicoAgrupado.Values.First()
            .Select(h => h.Fecha.ToString("dd/MM HH:mm"))
            .ToList();

        config.Data.Labels = fechas;

        foreach (var kvp in historicoAgrupado)
        {
            var dataset = new LineDataset
            {
                Label = kvp.Key,
                Data = kvp.Value.Select(h => (decimal?)h.Compra).ToList(),
                BorderColor = GenerarColorHex(kvp.Key),
                Fill = false
            };

            config.Data.Datasets.Add(dataset);
        }
    }

    private string GenerarColorHex(string nombre)
    {
        var hash = nombre.GetHashCode();
        var r = (hash & 0xFF0000) >> 16;
        var g = (hash & 0x00FF00) >> 8;
        var b = (hash & 0x0000FF);
        return $"#{r:X2}{g:X2}{b:X2}";
    }
}
