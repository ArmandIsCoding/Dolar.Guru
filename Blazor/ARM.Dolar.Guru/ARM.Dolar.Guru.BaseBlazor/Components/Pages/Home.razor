@page "/"
@attribute [StreamRendering]
@rendermode InteractiveServer

@using System.Globalization
@using ARM.Dolar.Guru.BaseBlazor.Models
@using ARM.Dolar.Guru.Models
@using ARM.Dolar.Guru.Services
@inject CotizacionesService CotizacionesService

<PageTitle>Home</PageTitle>

<style>
    .card-hover {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    .card-hover:hover {
        transform: scale(1.03);
        box-shadow: 0 0 25px rgba(0, 0, 0, 0.3);
    }
</style>

<div class="w-100 py-3 mb-4 bg-light border-bottom shadow-sm rounded px-3">
    <div class="d-flex justify-content-between align-items-center flex-wrap">
        <h5 class="mb-2 mb-md-0 text-primary fw-bold">📈 Cotizaciones actualizadas al instante</h5>

        <button class="btn btn-outline-primary fw-semibold shadow-sm px-4 py-2 rounded-pill d-flex align-items-center gap-2"
                @onclick="BotonRecargarClick"
                disabled="@cargando">

            @if (cargando)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span>Cargando...</span>
            }
            else
            {
                <span>🔄 Renovar cotizaciones ahora</span>
                <span class="text-muted small ms-3" style="color:@(segundosRestantes <= 5 ? "red" : "gray")">
                    ⏳ Actualización en: @segundosRestantes s
                </span>
            }
        </button>

    </div>
</div>

@if (cotizacionesDolar is null || cotizacionesOtros is null || cargando)
{
    <div class="text-center py-5">
        <img src="dolar-guru.png" style="max-height: 332px;" />
        <div class="spinner-border text-primary mt-3" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>
}
else
{
    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-primary text-white fw-bold fs-5">
            💵 Cotizaciones del Dólar
        </div>
        <div class="card-body">
            <div class="row row-cols-2 row-cols-md-3 row-cols-lg-5 g-4">
                @foreach (var cotizacion in cotizacionesDolar)
                {
                    var tipo = TipoDolarHelper.Parse(cotizacion.Nombre);
                    var estilo = Estilos.Dolar[tipo];
                    var icono = Estilos.IconosDolar.ContainsKey(tipo) ? Estilos.IconosDolar[tipo] : "bi-cash-coin";
                    var horas = (int)(DateTime.UtcNow - cotizacion.FechaActualizacion.ToUniversalTime()).TotalHours;

                    <div class="col">
                        <div class="card h-100 text-white border-0 shadow-lg card-hover"
                             style="background: linear-gradient(135deg, @estilo.Color1, @estilo.Color2);">
                            <div class="card-body d-flex flex-column justify-content-between">
                                <div class="mb-3">
                                    <div class="d-flex align-items-center justify-content-between">
                                        <h5 class="card-title fw-bold mb-0">
                                            <i class="bi @icono me-2 fs-4"></i>@cotizacion.Nombre
                                        </h5>
                                        <span class="badge bg-light text-dark">ARS/USD</span>
                                    </div>
                                    <p class="mt-2"><i class="bi bi-clock-history me-1"></i>Hace @horas horas</p>
                                </div>
                                <div class="d-flex justify-content-around border-top pt-3 mt-auto">
                                    <div class="text-center">
                                        <i class="bi bi-arrow-down-circle-fill fs-4 mb-1"></i><br />
                                        <small class="fw-light">Compra</small><br />
                                        <span class="fs-5 fw-bold">@cotizacion.Compra.ToString("C")</span>
                                    </div>
                                    <div class="text-center">
                                        <i class="bi bi-arrow-up-circle-fill fs-4 mb-1"></i><br />
                                        <small class="fw-light">Venta</small><br />
                                        <span class="fs-5 fw-bold">@cotizacion.Venta.ToString("C")</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-secondary text-white fw-bold fs-5">
            💵 Otras Cotizaciones
            <small class="ms-2 text-light">Valores expresados en relación al <strong>Peso Argentino</strong></small>
        </div>
        <div class="card-body">
            <div class="row row-cols-2 row-cols-md-3 row-cols-lg-5 g-4">
                @foreach (var cotizacion in cotizacionesOtros)
                {
                    var tipo = TipoDivisaHelper.Parse(cotizacion.Nombre);
                    var estilo = Estilos.Otros[tipo];
                    var icono = Estilos.IconosOtros.ContainsKey(tipo) ? Estilos.IconosOtros[tipo] : "bi-cash-coin";
                    var horas = (int)(DateTime.UtcNow - cotizacion.FechaActualizacion.ToUniversalTime()).TotalHours;

                    <div class="col">
                        <div class="card h-100 text-white border-0 shadow-lg card-hover"
                             style="background: linear-gradient(135deg, @estilo.Color1, @estilo.Color2);">
                            <div class="card-body d-flex flex-column justify-content-between">
                                <div class="mb-3">
                                    <div class="d-flex align-items-center justify-content-between">
                                        <h5 class="card-title fw-bold mb-0">
                                            <i class="bi @icono me-2 fs-4"></i>@cotizacion.Nombre
                                        </h5>
                                        <span class="badge bg-light text-dark">@cotizacion.Moneda / ARS</span>
                                    </div>
                                    <p class="mt-2"><i class="bi bi-clock-history me-1"></i>Hace @horas horas</p>
                                </div>
                                <div class="d-flex justify-content-around border-top pt-3 mt-auto">
                                    <div class="text-center">
                                        <i class="bi bi-arrow-down-circle-fill fs-4 mb-1"></i><br />
                                        <small class="fw-light">Compra</small><br />
                                        <span class="fs-5 fw-bold">@cotizacion.Compra.ToString("C")</span>
                                    </div>
                                    <div class="text-center">
                                        <i class="bi bi-arrow-up-circle-fill fs-4 mb-1"></i><br />
                                        <small class="fw-light">Venta</small><br />
                                        <span class="fs-5 fw-bold">@cotizacion.Venta.ToString("C")</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

<Proyeccion />
<Disclaimer />

@code {
    private bool cargando = false;
    private List<Cotizacion>? cotizacionesDolar;
    private List<CotizacionOtros>? cotizacionesOtros;

    private int segundosRestantes = 30;
    private const int INTERVALO_RECARGA = 30;
    private CancellationTokenSource? cts;

    protected override async Task OnInitializedAsync()
    {
        await RecargarCotizaciones();
        IniciarContador();
    }

    private async Task RecargarCotizaciones()
    {
        cargando = true;
        await InvokeAsync(StateHasChanged); // Actualiza la UI para mostrar el spinner

        (cotizacionesDolar, cotizacionesOtros) = await CotizacionesService.ObtenerUltimasCotizacionesAsync();

        cargando = false;
        segundosRestantes = INTERVALO_RECARGA; // Reinicia el contador visualmente
        await InvokeAsync(StateHasChanged); // Actualiza la UI con los nuevos datos
    }

    private void IniciarContador()
    {
        cts?.Cancel(); // Cancela cualquier contador anterior
        cts = new CancellationTokenSource();
        var token = cts.Token;

        _ = Task.Run(async () =>
        {
            while (!token.IsCancellationRequested)
            {
                await InvokeAsync(async () =>
                {
                    if (segundosRestantes > 0)
                    {
                        segundosRestantes--;
                    }
                    else
                    {
                        segundosRestantes = INTERVALO_RECARGA; // Reinicia para la próxima vuelta
                        await RecargarCotizaciones();
                    }
                    StateHasChanged();
                });

                // Espera 1 segundo antes de la próxima iteración
                await Task.Delay(1000, token);
            }
        }, token);
    }

    // Método para el botón de recarga manual
    private async Task BotonRecargarClick()
    {
        cts?.Cancel(); // Detiene el contador automático
        await RecargarCotizaciones();
        IniciarContador(); // Lo reinicia
    }

    // Implementa IAsyncDisposable para limpiar el CancellationTokenSource
    public async ValueTask DisposeAsync()
    {
        if (cts != null)
        {
            cts.Cancel();
            cts.Dispose();
            cts = null;
        }
    }
}